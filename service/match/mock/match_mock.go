// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/match.go

// Package match is a generated GoMock package.
package match

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/iqbalrestu07/datting-apps-api/domain"
	request "github.com/iqbalrestu07/datting-apps-api/request"
)

// MockMatchUsecase is a mock of MatchUsecase interface.
type MockMatchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMatchUsecaseMockRecorder
}

// MockMatchUsecaseMockRecorder is the mock recorder for MockMatchUsecase.
type MockMatchUsecaseMockRecorder struct {
	mock *MockMatchUsecase
}

// NewMockMatchUsecase creates a new mock instance.
func NewMockMatchUsecase(ctrl *gomock.Controller) *MockMatchUsecase {
	mock := &MockMatchUsecase{ctrl: ctrl}
	mock.recorder = &MockMatchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchUsecase) EXPECT() *MockMatchUsecaseMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockMatchUsecase) FindAll(ctx context.Context, filter request.MatchRequest) ([]domain.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]domain.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMatchUsecaseMockRecorder) FindAll(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMatchUsecase)(nil).FindAll), ctx, filter)
}

// Match mocks base method.
func (m *MockMatchUsecase) Match(ctx context.Context, data *domain.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockMatchUsecaseMockRecorder) Match(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatchUsecase)(nil).Match), ctx, data)
}

// MockMatchRepository is a mock of MatchRepository interface.
type MockMatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepositoryMockRecorder
}

// MockMatchRepositoryMockRecorder is the mock recorder for MockMatchRepository.
type MockMatchRepositoryMockRecorder struct {
	mock *MockMatchRepository
}

// NewMockMatchRepository creates a new mock instance.
func NewMockMatchRepository(ctrl *gomock.Controller) *MockMatchRepository {
	mock := &MockMatchRepository{ctrl: ctrl}
	mock.recorder = &MockMatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepository) EXPECT() *MockMatchRepositoryMockRecorder {
	return m.recorder
}

// CheckForLike mocks base method.
func (m *MockMatchRepository) CheckForLike(ctx context.Context, filter request.MatchRequest) (domain.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForLike", ctx, filter)
	ret0, _ := ret[0].(domain.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForLike indicates an expected call of CheckForLike.
func (mr *MockMatchRepositoryMockRecorder) CheckForLike(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForLike", reflect.TypeOf((*MockMatchRepository)(nil).CheckForLike), ctx, filter)
}

// Create mocks base method.
func (m *MockMatchRepository) Create(ctx context.Context, data *domain.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMatchRepositoryMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMatchRepository)(nil).Create), ctx, data)
}

// FindAll mocks base method.
func (m *MockMatchRepository) FindAll(ctx context.Context, filter request.MatchRequest) ([]domain.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, filter)
	ret0, _ := ret[0].([]domain.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMatchRepositoryMockRecorder) FindAll(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMatchRepository)(nil).FindAll), ctx, filter)
}

// Update mocks base method.
func (m *MockMatchRepository) Update(ctx context.Context, data *domain.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMatchRepositoryMockRecorder) Update(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMatchRepository)(nil).Update), ctx, data)
}
