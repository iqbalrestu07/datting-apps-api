// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/premium_feature.go

// Package premium_feature is a generated GoMock package.
package premium_feature

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/iqbalrestu07/datting-apps-api/domain"
)

// MockPremiumFeatureUsecase is a mock of PremiumFeatureUsecase interface.
type MockPremiumFeatureUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPremiumFeatureUsecaseMockRecorder
}

// MockPremiumFeatureUsecaseMockRecorder is the mock recorder for MockPremiumFeatureUsecase.
type MockPremiumFeatureUsecaseMockRecorder struct {
	mock *MockPremiumFeatureUsecase
}

// NewMockPremiumFeatureUsecase creates a new mock instance.
func NewMockPremiumFeatureUsecase(ctrl *gomock.Controller) *MockPremiumFeatureUsecase {
	mock := &MockPremiumFeatureUsecase{ctrl: ctrl}
	mock.recorder = &MockPremiumFeatureUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPremiumFeatureUsecase) EXPECT() *MockPremiumFeatureUsecaseMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockPremiumFeatureUsecase) Subscribe(ctx context.Context, data domain.PremiumFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPremiumFeatureUsecaseMockRecorder) Subscribe(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPremiumFeatureUsecase)(nil).Subscribe), ctx, data)
}
