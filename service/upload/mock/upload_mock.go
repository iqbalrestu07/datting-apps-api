// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/photo.go

// Package upload is a generated GoMock package.
package upload

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/iqbalrestu07/datting-apps-api/domain"
)

// MockUploadUsecase is a mock of UploadUsecase interface.
type MockUploadUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUploadUsecaseMockRecorder
}

// MockUploadUsecaseMockRecorder is the mock recorder for MockUploadUsecase.
type MockUploadUsecaseMockRecorder struct {
	mock *MockUploadUsecase
}

// NewMockUploadUsecase creates a new mock instance.
func NewMockUploadUsecase(ctrl *gomock.Controller) *MockUploadUsecase {
	mock := &MockUploadUsecase{ctrl: ctrl}
	mock.recorder = &MockUploadUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadUsecase) EXPECT() *MockUploadUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUploadUsecase) Create(ctx context.Context, m *domain.Photo) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUploadUsecaseMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUploadUsecase)(nil).Create), ctx, m)
}

// MockUploadRepository is a mock of UploadRepository interface.
type MockUploadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUploadRepositoryMockRecorder
}

// MockUploadRepositoryMockRecorder is the mock recorder for MockUploadRepository.
type MockUploadRepositoryMockRecorder struct {
	mock *MockUploadRepository
}

// NewMockUploadRepository creates a new mock instance.
func NewMockUploadRepository(ctrl *gomock.Controller) *MockUploadRepository {
	mock := &MockUploadRepository{ctrl: ctrl}
	mock.recorder = &MockUploadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadRepository) EXPECT() *MockUploadRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUploadRepository) Create(ctx context.Context, inv *domain.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, inv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUploadRepositoryMockRecorder) Create(ctx, inv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUploadRepository)(nil).Create), ctx, inv)
}
